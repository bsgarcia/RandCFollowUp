%-------------------------------------------------------------------------
init;
%-------------------------------------------------------------------------

selected_exp = [1,2,3,4,5, 6.1, 6.2];

displayfig = 'off';
force = true;

for exp_num = selected_exp
    
    % session
    sess = round((exp_num - round(exp_num)) * 10 - 1);
    
    % load data
    name = char(filenames{round(exp_num)});
    
    data = d.(name).data;
    sub_ids = d.(name).sub_ids;
    
    [corr, cho, out2, p1, p2, ev1, ev2, ctch, cont1, cont2, dist] = ...
        DataExtraction.extract_sym_vs_lot_post_test(...
        data, sub_ids, idx, sess);
    
    % --------------------------------------------------------------------
    % Compute for each symbol p of chosing depending on described cue value
    % -------------------------------------------------------------------

    p_lot = unique(p2)';
    p_sym = unique(p1)';
    
    chose_symbol = zeros(d.(name).nsub, length(p_lot), length(p_sym));
    for i = 1:d.(name).nsub
        for j = 1:length(p_lot)
            for k = 1:length(p_sym)
                temp = ...
                    cho(i, logical((p2(i, :) == p_lot(j)) .* (p1(i, :) == p_sym(k))));
                    chose_symbol(i, j, k) = temp(l) == 1;
            end
        end
    end
    
    nsub = size(cho, 1);
    k = 1:nsub;
    
    prop = zeros(length(p_sym), length(p_lot));
    temp1 = cho(k, :);
    for j = 1:length(p_lot)
        for l = 1:length(p_sym)
            temp = temp1(...
                logical((p2(k, :) == p_lot(j)) .* (p1(k, :) == p_sym(l))));
            prop(l, j) = mean(temp == 1);
            err_prop(l, j) = std(temp == 1)./sqrt(length(temp));
            
        end
    end
    
    pp = zeros(nsub, length(p_sym), length(p_lot));
    
    for sub = 1:nsub
        disp(sub);
                
        for i = 1:length(p_sym)
            Y(i, :) = reshape(chose_symbol(sub, :, i), [], 1);
            X(i, :) = p_lot;
        end
        
        try 
            if force 
                error('fitting');
            end
             param = load(...
                 sprintf('data/post_test_fitparam_ED_exp_%d_%d.mat',...
                 round(exp_num), sess));
             beta1 = param.beta1;
             midpoint = param.midpoint;
             tosave = false;
        catch
            tosave = true;
            options = optimset(...
                'Algorithm',...
                'interior-point',...
                'Display', 'off',...
                'MaxIter', 10000,...
                'MaxFunEval', 10000);

            [params(sub,:), err(sub)] = fmincon(...
                @(x) tofit(x, X, Y),...
                [1, .5, .5, .5, .5, .5, .5, .5, .5],...
                [], [], [], [],...
                [0.01, 0, 0, 0, 0, 0, 0, 0 ,0],...
                [inf, 1, 1, 1, 1, 1, 1, 1, 1],...
                [],...
                options...
            );


            options = optimset('Display','off');

      
        end
        
        for i = 1:length(p_sym)         
            pp(sub, i, :) = logfun(X(i, :)', midpoint(sub, i), beta1(sub));
        end
        
    end
    
    if tosave
        param.midpoint = params(sub, 2:9);
        param.beta1 = params(:, 1);
        param.err = err;
        
        save(sprintf('data/post_test_fitparam_ED_exp_%d_%d.mat', round(exp_num), sess),...
            '-struct', 'param');
    end
    
      
    for i = 1:length(p_sym)
        pp1(i, :) = mean(pp(:, i, :));
    end
    
%     figure('Renderer', 'painters',...
%     'Position', [145,157,1200,600], 'visible', 'on')
% 
%     pwin = p_sym;
%     
%     alpha = linspace(.15, .95, length(p_sym));
%     lin1 = plot(...
%         linspace(p_sym(1), p_sym(end), 12), ones(12)*0.5,...
%         'LineStyle', ':', 'Color', [0, 0, 0], 'HandleVisibility', 'off');
%     hold on
%     
%     subplot(1, 2, 1)
%     for i = 1:length(pwin)
%                
%         lin3 = plot(...
%             p_lot,  prop(i, :),...
%             'Color', orange_color, 'LineWidth', 4.5...% 'LineStyle', '--' ...
%             );
%         
%         lin3.Color(4) = alpha(i);
%         
%         %ind_point1(i) = interp1(lin3.YData,lin3.XData, 0.5);
% 
%         hold on
% 
%         ylim([-0.08, 1.08]);
%         xlim([-0.08, 1.08]);
%         box off
%     end
% 
%     
%     subplot(1, 2, 2)
%     for i = 1:length(pwin)
%                
%         lin3 = plot(...
%             p_lot,  pp1(i, :),...
%             'Color', orange_color, 'LineWidth', 4.5...% 'LineStyle', '--' ...
%             );
%         
%         lin3.Color(4) = alpha(i);
%         
%         ind_point2(i) = interp1(lin3.YData,lin3.XData, 0.5);
%         hold on
% 
%         ylim([-0.08, 1.08]);
%         xlim([-0.08, 1.08]);
%         box off
%         
%     end
%     
%     set(gca,'TickDir','out')
%     
    clear X Y
end


function err = tofit(params, X, Y)
    options = optimset('Display','off');
    temp = params(1);
    midpoints = params(2:end);
    for i = 1:size(Y, 1)
        residuals(i,:) = logfun(X(i,:)', midpoints(i), temp) - Y(i,:)';
    end
    err = sum(residuals.^2, 'all');
end

function p = logfun(x, midpoint, temp)
    p = 1./(1+exp(temp.*(x-midpoint)));
end

 