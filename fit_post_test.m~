% --------------------------------------------------------------------
clear all
close all
% --------------------------------------------------------------------
% This script finds the best fitting Values for each exp
% then plots the article figs
% --------------------------------------------------------------------
init;

%------------------------------------------------------------------------
% Plot fig 2.A
%------------------------------------------------------------------------
%exp_names = {filenames{1:3}};
%plot_fitted_values_desc_vs_exp(d, idx, fit_folder, orange_color, exp_names);

exp_names = {filenames{5:7}};
plot_fitted_values_all_session(d, idx, fit_folder, orange_color, blue_color, exp_names);

%exp_names = {filenames{6}};
%plot_fitted_values_6(d, idx, fit_folder, orange_color, blue_color, exp_names);

% --------------------------------------------------------------------
% FUNCTIONS USED IN THIS SCRIPT
% --------------------------------------------------------------------
function plot_fitted_values_all_session(d, idx, fit_folder, orange_color, blue_color, exp_names)

    i = 1;

    titles = {'Exp. 5 Sess. 1', 'Exp. 5 Sess. 2',...
              'Exp. 6 Sess. 1', 'Exp 6 Sess. 2',...
              'Exp. 7 Sess. 1', 'Exp 7 Sess. 2'};

    for exp_name = exp_names
        for session = [0, 1]
            figure('Position', [1,1,900,600]);

            exp_name = char(exp_name);
            [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                DataExtraction.extract_sym_vs_sym_post_test(...
                d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

            % set ntrials
            ntrials = size(cho, 2);
            subjecttot = length(d.(exp_name).sub_ids);
            if ismember(i, [5, 6])
                subjecttot = size(cho, 1);
            end
            nz = [8, 1];
            cont1(ismember(cont1, [6, 7, 8, 9])) = ...
                cont1(ismember(cont1, [6, 7, 8, 9]))-1;
            cont2(ismember(cont2, [6, 7, 8, 9])) = ...
                cont2(ismember(cont2, [6, 7, 8, 9]))-1;

            type = 3;

            if ismember(i, [5, 6])
                u_cont = unique(cont1)';

                count = 1;
                for j = u_cont
                    disp(j);
                    cont1(cont1 == j) = count;
                    cont2(cont2 == j) = count;
                    count = count + 1;
                end
            end

            [parameters, ll] = runfit(...
                subjecttot,...
                cont1,...
                cont2,...
                cho,...
                ntrials,...
                nz,...
                fit_folder,...
                sprintf('%s%s_sess_%d', exp_name, '_exp_vs_exp', session), type);

            ev = unique(ev1);
            Y1 = parameters(:, 1:8)';

            if ismember(i, [5, 6])
                [throw, order] = sort(mean(parameters, 1));
                Y1 = parameters(:, order)';
            end

            [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                DataExtraction.extract_sym_vs_lot_post_test(...
                d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

            % set ntrials
            ntrials = size(cho, 2);

            subjecttot = length(d.(exp_name).sub_ids);
            if ismember(i, [5, 6])
                subjecttot = size(cho, 1);
            end
            nz = [8, 1];
            cont1(ismember(cont1, [6, 7, 8, 9])) = ...
                cont1(ismember(cont1, [6, 7, 8, 9]))-1;
            cont2 = ev2;
            type = 2;

            if ismember(i, [5, 6])
                u_cont = unique(cont1)';

                count = 1;
                for j = u_cont
                    disp(j);
                    cont1(cont1 == j) = count;
                    count = count + 1;
                end
            end

            [parameters, ll] = runfit(...
                subjecttot,...
                cont1,...
                cont2,...
                cho,...
                ntrials,...
                nz,...
                fit_folder,...
                sprintf('%s%s_sess_%d', exp_name, '_desc_vs_exp', session), type);

            Y2 = parameters(: , 1:8)';

            if ismember(i, [5, 6])
                [throw, order] = sort(mean(parameters, 1));
                Y2 = parameters(:, order)';
            end
            %x = linspace(min(xlim), max(yl), 10);
            brick_comparison_plot(...
                Y1,...
                Y2,...
                blue_color,...
                orange_color,...
                [-1, 1], 11,...
                '',...
                'Symbol Expected Value',...
                'Fitted value', ev, 1);
            title(titles{i});
            hold on

            yline(0, 'LineStyle', ':', 'LineWidth', 2);
            hold on

            x_lim = get(gca, 'XLim');
            y_lim = get(gca, 'YLim');
            
            if ismember(i, [5, 6])
                x1 = linspace(x_lim(1), x_lim(2).*.5, 10);
                x2 = linspace(x_lim(2).*.5,  x_lim(2), 10);
                y = linspace(-.8, -.5, 10);
            else
                x = linspace(x_lim(1), x_lim(2), 10);
                y = linspace(y_lim(1), y_lim(2), 10);
            end
            
            plot(x, y, 'LineStyle', '--', 'Color', 'k');
            hold on

            for sub = 1:subjecttot
                X = ev;
                Y = Y1(:, sub);
                [r(1, i, sub, :), thrw1, thrw2] = glmfit(X, Y);
                b = glmfit(1:length(ev), Y);
                pY1(sub, :) = glmval(b, 1:length(ev), 'identity');
                X = ev;
                Y = Y2(:, sub);
                [r(2, i, sub, :), thrw1, thrw2] = glmfit(X, Y);
                b = glmfit(1:length(ev), Y);
                pY2(sub, :) = glmval(b, 1:length(ev), 'identity');
            end

            mn1 = mean(pY1, 1);
            mn2 = mean(pY2, 1);
            err1 = std(pY1, 1)./sqrt(subjecttot);
            err2 = std(pY2, 1)./sqrt(subjecttot);

            curveSup1 = (mn1 + err1);
            curveSup2 = (mn2 + err2);
            curveInf1 = (mn1 - err1);
            curveInf2 = (mn2 -err2);

            plot(1:length(ev), mn1, 'LineWidth', 1.7, 'Color', blue_color);
            hold on
            plot(1:length(ev), mn2, 'LineWidth', 1.7, 'Color', orange_color);
            hold on
            fill([(1:length(ev))'; flipud((1:length(ev))')], [curveInf1'; flipud(curveSup1')],...
                blue_color, ...
                'lineWidth', 1, ...
                'LineStyle', 'none',...
                'Facecolor', blue_color, ...
                'Facealpha', 0.55);
            hold on
            fill([(1:length(ev))'; flipud((1:length(ev))')],[curveInf2'; flipud(curveSup2')],...
                orange_color, ...
                'lineWidth', 1, ...
                'LineStyle', 'none',...
                'Facecolor', orange_color, ...
                'Facealpha', 0.55);
            hold on
            box off
            mkdir('fig/exp', 'fit_post_test_desc_vs_exp');

            num = [5, 5, 6, 6, 7, 7];
            str = sprintf('fig/exp/fit_post_test_desc_vs_exp/exp_%d_sess_%d.png', num(i), session+1);      

            saveas(gcf, str)

            i = i + 1;
        end

    end

    %titles2 = {'Intercept', 'Slope'};
    %sub_plot = [4, 3];
%     for j = 1:2
%         if j == 1
%             continue
%         end
%         figure('Position', [1,1,900,600]);
% 
%         %subplot(2, 2, sub_plot(j))
%         for k = 1:6
%             %rsize = reshape(r(:, k, :, j), [size(r, 3), 2]);
%             %mn(k, :) = mean(rsize);
%             %err(k, :) = std(rsize)./sqrt(size(r, 3));
% 
%             dd{k, 1} = reshape(r(2, k, :, j), [], 1);
%             dd{k, 2} = reshape(r(1, k, :, j), [], 1);
%             
%             mn(k, 1) = mean(dd{k, 1});
%             mn(k, 2) = mean(dd{k, 2});
%             
%             err(k, 1) = std(dd{k, 1})./sqrt(length(dd{k, 1}));
%             err(k, 2) = std(dd{k, 2})./sqrt(length(dd{k, 2}));
% 
%         end
%         
%         x = dd{1, 1};
%         y = dd{1, 2};
%         p = signrank(x,y);
%         pp(1) = p;
%        
%         x = dd{2, 1};
%         y = dd{2, 2};
%         p = signrank(x,y);
%         pp(2) = p;
%   
%         x = dd{3, 1};
%         y = dd{3, 2};
%         p = signrank(x,y);
%         pp(3) = p;
% 
%         %pp = pval_adjust(pp, 'bonferroni');
%         for sp = pp 
%             if sp < .001
%                 h = '***';
%             elseif sp < .01
%                 h='**';
%             elseif sp < .05
%                 h ='*';
%             else 
%                 h = 'none';
%             end
%             fprintf('h=%s, p=%d \n', h, sp);
%         end
%         fprintf('===================== \n');
%         b = bar(mn);% 'EdgeColor', 'w', 'FaceAlpha', 0.6, 'FaceColor', 'flat');
%         hold on
% 
%         b(1).FaceColor = orange_color;
%         b(2).FaceColor = blue_color;
%         b(1).FaceAlpha = 0.7;
%         b(2).FaceAlpha = 0.7;
% 
%         ax1 = gca;
%         set(gca, 'XTickLabel', titles);
%         ylabel('Slope Value');
%         %title(titles2{j});
%         legend('post-test ED', 'post-test EE',  'Location', 'southeast');
%         e1 = errorbar(b(1).XData+b(1).XOffset, mn(:, 1), err(:, 1), 'LineStyle', 'none',...
%             'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');
%         hold on
%         e2 = errorbar(b(2).XData+b(2).XOffset, mn(:, 2), err(:, 2), 'LineStyle', 'none',...
%             'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');
% 
%         box off
% 
%         hold on
%         ngroups = 6;
%         nbars = 2;
%         % Calculating the width for each bar group
%         groupwidth = min(0.8, nbars/(nbars + 1.5));
%         colors = [orange_color; blue_color];
%         for b = 1:nbars
%             x = (1:ngroups) - groupwidth/2 + (2*b-1) * groupwidth / (2*nbars);
%             hold on
%             for k = 1:length(x)
% 
%                 d = reshape(dd{k, b}, [], 1);
%                 nsub = length(d);
% 
%                 s = scatter(...
%                     x(k).*ones(1, nsub)-Shuffle(linspace(-0.04, 0.04, nsub)),...
%                     d',...
%                     'MarkerFaceAlpha', 0.65, 'MarkerEdgeAlpha', 1,...
%                     'MarkerFaceColor', colors(b, :),...
%                     'MarkerEdgeColor', 'w', 'HandleVisibility','off');
%             end
%         end
% 
%         uistack(e1, 'top');
%         uistack(e2, 'top');
% 
%         %set(gca, 'xtick', []);
%         set(gca, 'box', 'off');
%         %set(ax(j), 'box', 'off');
% 
%         %set(gca, 'ytick', []);
%         %ylim([0, 1.15]);
% 
%         box off
%         str = 'fig/exp/fit_post_test_desc_vs_exp/exp_4_5_6_7.png';  
%        
%         saveas(gcf, str)
%     end
    

    %saveas(gcf, 'fig/fit/all/fitted_value_exp_4_5.png')

end


function plot_fitted_values_desc_vs_exp(d, idx, fit_folder, orange_color, exp_names)

    i = 1;
    titles = {'Exp. 1', 'Exp. 2', 'Exp. 3'};

    for exp_name = exp_names
        
        figure('Position', [1,1,900,600]);

        exp_name = char(exp_name);
        [corr1{i}, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
            DataExtraction.extract_sym_vs_lot_post_test(...
            d.(exp_name).data, d.(exp_name).sub_ids, idx, 0);

        ev = [-0.8, -0.6, -0.4, -0.2, 0.2, 0.4, 0.6, 0.8];
        % set ntrials
        ntrials = size(cho, 2);
        subjecttot = length(d.(exp_name).sub_ids);
        nz = [8, 1];
        cont1(ismember(cont1, [6, 7, 8, 9])) = ...
            cont1(ismember(cont1, [6, 7, 8, 9]))-1;
        cont2 = ev2;
        type = 2;

        [parameters, ll] = runfit(...
            subjecttot,...
            cont1,...
            cont2,...
            cho,...
            ntrials,...
            nz,...
            fit_folder,...
            sprintf('%s%s', exp_name, '_desc_vs_exp'),...
            type);

        Y2 = parameters(: , 1:8)';
        
        brickplot(...
            Y2,...
            orange_color.*ones(8, 1),...
            [-1, 1], 11,...
            sprintf('Exp. %d', i),...
            'Symbol Expected Value',...
            'Fitted value', ev, 1);

        hold on

        yline(0, 'LineStyle', ':', 'LineWidth', 2);
        hold on

        x_lim = get(gca, 'XLim');
        y_lim = get(gca, 'YLim');

        x = linspace(x_lim(1), x_lim(2), 10);

        y = linspace(y_lim(1), y_lim(2), 10);
        plot(x, y, 'LineStyle', '--', 'Color', 'k');
        hold on

        for sub = 1:subjecttot
            X = ev;
            Y = Y2(:, sub);
            [r(i, sub, :), thrw1, thrw2] = glmfit(X, Y);
            b = glmfit(1:length(ev), Y);
            pY2(sub, :) = glmval(b, 1:length(ev), 'identity');
        end

        mn2 = mean(pY2, 1);
        err2 = std(pY2, 1)./sqrt(subjecttot);

        curveSup2 = (mn2 + err2);
        curveInf2 = (mn2 -err2);

        p1 = plot(1:length(ev), mn2, 'LineWidth', 1.7, 'Color', orange_color);

        hold on
        p2 = fill([(1:length(ev))'; flipud((1:length(ev))')],[curveInf2'; flipud(curveSup2')],...
            orange_color, ...
            'lineWidth', 1, ...
            'LineStyle', 'none',...
            'Facecolor', orange_color, ...
            'Facealpha', 0.55);
        hold on

        box off
        
        mkdir('fig/exp', 'fit_post_test');
        saveas(gcf, sprintf('fig/exp/fit_post_test/exp_%d.png', i));
        
        i = i + 1;

        %uistack(p1, 'bottom');
        %uistack(p2, 'bottom');
        clear parameters
    end
    
    
    %sub_plot = [4, 3];
    for j = 1:2
        figure('Position', [1,1,900,600]);
        
        for k = 1:3
            if j == 1
                rsize{k}  = mean(corr1{k}, 2)';              
                mn(k, :) = mean(rsize{k});
                err(k, :) = std(rsize{k})./sqrt(length(rsize{k}));      
            else
                rsize{k} = reshape(r(k, :, j), [size(r, 2), 1]);
                mn(k, :) = mean(rsize{k});
                err(k, :) = std(rsize{k})./sqrt(length(rsize{k}));            
            end
        end
        
        dd = rsize;
        
        x = dd{1};
        y = dd{2};
        p = ranksum(x,y);
        pp(1) = p;
       
        x = dd{2};
        y = dd{3};
        p = ranksum(x,y);
        pp(2) = p;
  
        x = dd{1};
        y = dd{3};
        p = ranksum(x,y);
        pp(3) = p;

        %pp = pval_adjust(pp, 'bonferroni');
        for sp = pp 
            if sp < .001
                h = '***';
            elseif sp < .01
                h='**';
            elseif sp < .05
                h ='*';
            else 
                h = 'none';
            end
            fprintf('h=%s, p=%d \n', h, sp);
        end
        fprintf('===================== \n');
        b = bar(mn);
        hold on

        b.FaceColor = orange_color;
        b.FaceAlpha = 0.7;

        ax1 = gca;
        set(gca, 'XTickLabel', titles);
        if j == 1
            ylabel('Correct choice rate');

        else
            ylabel('Slope Value');            
        end

        %title(titles2{j});
        e = errorbar(b.XData+b.XOffset, mn(:, 1), err(:, 1),...
            'LineStyle', 'none',...
            'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');
        
        box off
        ngroups = 3;
        nbars = 1;
        % Calculating the width for each bar group
        groupwidth = min(0.8, nbars/(nbars + 1.5));
        %colors = [orange_color; blue_color];
        for b = 1:nbars
            x = (1:ngroups) - groupwidth/2 + (2*b-1) * groupwidth / (2*nbars);
            hold on
            for k = 1:length(x)

                d = reshape(rsize{k}, [], 1);
                nsub = length(d);

                s = scatter(...
                    x(k).*ones(1, nsub)-Shuffle(linspace(-0.1, 0.1, nsub)),...
                    d', 100,...
                    'MarkerFaceAlpha', 0.65, 'MarkerEdgeAlpha', 1,...
                    'MarkerFaceColor', orange_color,...
                    'MarkerEdgeColor', 'w', 'HandleVisibility','off');
            end
        end
        uistack(e, 'top');
        if j == 1
            ylim([.45, 1.1]);
        end
        if j == 1
            mkdir('fig/exp', 'correct_choice_rate_post_test');
            str = 'fig/exp/correct_choice_rate_post_test/exp_1_2_3.png';
        else
            str = 'fig/exp/fit_post_test/slope_exp_1_2_3.png';
        end
       
        saveas(gcf, str)

    end


end


function plot_fitted_values_all(d, idx, fit_folder, orange_color, blue_color, exp_names)

    i = 1;

    titles = {'Exp. 4', 'Exp. 5', 'Exp. 6', 'Exp. 7'};

    for exp_name = exp_names
        figure('Position', [1,1,900,600]);

        session = [0, 1];

        exp_name = char(exp_name);
        [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
            DataExtraction.extract_sym_vs_sym_post_test(...
            d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

        % set ntrials
        ntrials = size(cho, 2);
        subjecttot = length(d.(exp_name).sub_ids);
        if i == 4
            subjecttot = size(cho, 1);
        end
        nz = [8, 1];
        cont1(ismember(cont1, [6, 7, 8, 9])) = ...
            cont1(ismember(cont1, [6, 7, 8, 9]))-1;
        cont2(ismember(cont2, [6, 7, 8, 9])) = ...
            cont2(ismember(cont2, [6, 7, 8, 9]))-1;
        
        type = 3;
        
        if i == 4
            u_cont = unique(cont1)';

            count = 1;
            for j = u_cont
                disp(j);
                cont1(cont1 == j) = count;
                cont2(cont2 == j) = count;
                count = count + 1;
            end
        end
        
        [parameters, ll] = runfit(...
            subjecttot,...
            cont1,...
            cont2,...
            cho,...
            ntrials,...
            nz,...
            fit_folder,...
            sprintf('%s%s', exp_name, '_exp_vs_exp'), type);

        ev = unique(ev1);
        Y1 = parameters(:, 1:8)';

        if i == 4
            [throw, order] = sort(mean(parameters, 1));
            Y1 = parameters(:, order)';
        end

        [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
            DataExtraction.extract_sym_vs_lot_post_test(...
            d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

        % set ntrials
        ntrials = size(cho, 2);
        
        subjecttot = length(d.(exp_name).sub_ids);
        if i == 4
            subjecttot = size(cho, 1);
        end
        nz = [8, 1];
        cont1(ismember(cont1, [6, 7, 8, 9])) = ...
            cont1(ismember(cont1, [6, 7, 8, 9]))-1;
        cont2 = ev2;
        type = 2;
        
        if i == 4
            u_cont = unique(cont1)';

            count = 1;
            for j = u_cont
                disp(j);
                cont1(cont1 == j) = count;
                count = count + 1;
            end
        end

        [parameters, ll] = runfit(...
            subjecttot,...
            cont1,...
            cont2,...
            cho,...
            ntrials,...
            nz,...
            fit_folder,...
            sprintf('%s%s', exp_name, '_desc_vs_exp'), type);

        Y2 = parameters(: , 1:8)';
        
        if i == 4
            [throw, order] = sort(mean(parameters, 1));
            Y2 = parameters(:, order)';
        end
        %x = linspace(min(xlim), max(yl), 10);
        brick_comparison_plot(...
            Y1,...
            Y2,...
            blue_color,...
            orange_color,...
            [-1, 1], 11,...
            '',...
            'Symbol Expected Value',...
            'Fitted value', ev, 1);
        title(titles{i});
        hold on

        yline(0, 'LineStyle', ':', 'LineWidth', 2);
        hold on

        x_lim = get(gca, 'XLim');
        y_lim = get(gca, 'YLim');

        x = linspace(x_lim(1), x_lim(2), 10);

        y = linspace(y_lim(1), y_lim(2), 10);
        plot(x, y, 'LineStyle', '--', 'Color', 'k');
        hold on

        for sub = 1:subjecttot
            X = ev;
            Y = Y1(:, sub);
            [r(1, i, sub, :), thrw1, thrw2] = glmfit(X, Y);
            b = glmfit(1:length(ev), Y);
            pY1(sub, :) = glmval(b, 1:length(ev), 'identity');
            X = ev;
            Y = Y2(:, sub);
            [r(2, i, sub, :), thrw1, thrw2] = glmfit(X, Y);
            b = glmfit(1:length(ev), Y);
            pY2(sub, :) = glmval(b, 1:length(ev), 'identity');
        end

        mn1 = mean(pY1, 1);
        mn2 = mean(pY2, 1);
        err1 = std(pY1, 1)./sqrt(subjecttot);
        err2 = std(pY2, 1)./sqrt(subjecttot);

        curveSup1 = (mn1 + err1);
        curveSup2 = (mn2 + err2);
        curveInf1 = (mn1 - err1);
        curveInf2 = (mn2 -err2);

        plot(1:length(ev), mn1, 'LineWidth', 1.7, 'Color', blue_color);
        hold on
        plot(1:length(ev), mn2, 'LineWidth', 1.7, 'Color', orange_color);
        hold on
        fill([(1:length(ev))'; flipud((1:length(ev))')], [curveInf1'; flipud(curveSup1')],...
            blue_color, ...
            'lineWidth', 1, ...
            'LineStyle', 'none',...
            'Facecolor', blue_color, ...
            'Facealpha', 0.55);
        hold on
        fill([(1:length(ev))'; flipud((1:length(ev))')],[curveInf2'; flipud(curveSup2')],...
            orange_color, ...
            'lineWidth', 1, ...
            'LineStyle', 'none',...
            'Facecolor', orange_color, ...
            'Facealpha', 0.55);
        hold on
        box off
            mkdir('fig/exp', 'correct_choice_rate_post_test');
            
        num = [4, 5, 6, 7];
        str = sprintf('fig/exp/fit_post_test_desc_vs_exp/exp_%d.png', num(i));      
       
        saveas(gcf, str)
        
        i = i + 1;


    end

    %titles2 = {'Intercept', 'Slope'};
    %sub_plot = [4, 3];
    for j = 1:2
        if j == 1
            continue
        end
        figure('Position', [1,1,900,600]);

        %subplot(2, 2, sub_plot(j))
        for k = 1:4
            %rsize = reshape(r(:, k, :, j), [size(r, 3), 2]);
            %mn(k, :) = mean(rsize);
            %err(k, :) = std(rsize)./sqrt(size(r, 3));

            dd{k, 1} = reshape(r(2, k, :, j), [], 1);
            dd{k, 2} = reshape(r(1, k, :, j), [], 1);
            
            mn(k, 1) = mean(dd{k, 1});
            mn(k, 2) = mean(dd{k, 2});
            
            err(k, 1) = std(dd{k, 1})./sqrt(length(dd{k, 1}));
            err(k, 2) = std(dd{k, 2})./sqrt(length(dd{k, 2}));

        end
        
        x = dd{1, 1};
        y = dd{1, 2};
        p = signrank(x,y);
        pp(1) = p;
       
        x = dd{2, 1};
        y = dd{2, 2};
        p = signrank(x,y);
        pp(2) = p;
  
        x = dd{3, 1};
        y = dd{3, 2};
        p = signrank(x,y);
        pp(3) = p;

        %pp = pval_adjust(pp, 'bonferroni');
        for sp = pp 
            if sp < .001
                h = '***';
            elseif sp < .01
                h='**';
            elseif sp < .05
                h ='*';
            else 
                h = 'none';
            end
            fprintf('h=%s, p=%d \n', h, sp);
        end
        fprintf('===================== \n');
        b = bar(mn);% 'EdgeColor', 'w', 'FaceAlpha', 0.6, 'FaceColor', 'flat');
        hold on

        b(1).FaceColor = orange_color;
        b(2).FaceColor = blue_color;
        b(1).FaceAlpha = 0.7;
        b(2).FaceAlpha = 0.7;

        ax1 = gca;
        set(gca, 'XTickLabel', titles);
        ylabel('Slope Value');
        %title(titles2{j});
        legend('post-test ED', 'post-test EE',  'Location', 'southeast');
        e1 = errorbar(b(1).XData+b(1).XOffset, mn(:, 1), err(:, 1), 'LineStyle', 'none',...
            'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');
        hold on
        e2 = errorbar(b(2).XData+b(2).XOffset, mn(:, 2), err(:, 2), 'LineStyle', 'none',...
            'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');

        box off

        hold on
        ngroups = 4;
        nbars = 2;
        % Calculating the width for each bar group
        groupwidth = min(0.8, nbars/(nbars + 1.5));
        colors = [orange_color; blue_color];
        for b = 1:nbars
            x = (1:ngroups) - groupwidth/2 + (2*b-1) * groupwidth / (2*nbars);
            hold on
            for k = 1:length(x)

                d = reshape(dd{k, b}, [], 1);
                nsub = length(d);

                s = scatter(...
                    x(k).*ones(1, nsub)-Shuffle(linspace(-0.04, 0.04, nsub)),...
                    d',...
                    'MarkerFaceAlpha', 0.65, 'MarkerEdgeAlpha', 1,...
                    'MarkerFaceColor', colors(b, :),...
                    'MarkerEdgeColor', 'w', 'HandleVisibility','off');
            end
        end

        uistack(e1, 'top');
        uistack(e2, 'top');

        %set(gca, 'xtick', []);
        set(gca, 'box', 'off');
        %set(ax(j), 'box', 'off');

        %set(gca, 'ytick', []);
        %ylim([0, 1.15]);

        box off
        str = 'fig/exp/fit_post_test_desc_vs_exp/exp_4_5_6_7.png';  
       
        saveas(gcf, str)
    end


    %saveas(gcf, 'fig/fit/all/fitted_value_exp_4_5.png')

end

function plot_fitted_values_6(d, idx, fit_folder, orange_color, blue_color, exp_names)

    i = 1;

    figure('Position', [1,1,1920,1090]);
    titles = {'Exp. 6 Sess. 1', 'Exp. 6 Sess. 2'};

    for exp_name = {exp_names{:} exp_names{end}}
        if i == 2
            session = 1;
            to_add = '_sess_2';
        else
            session = 0;
            to_add = '_sess_1';
        end
        subplot(2, 2, i);
        exp_name = char(exp_name);
        [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
            DataExtraction.extract_sym_vs_sym_post_test(...
            d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

        % set ntrials
        ntrials = size(cho, 2);
        subjecttot = length(d.(exp_name).sub_ids);
        nz = [8, 1];
        
        cont1(ismember(cont1, [6, 7, 8, 9])) = ...
            cont1(ismember(cont1, [6, 7, 8, 9]))-1;
        cont2(ismember(cont2, [6, 7, 8, 9])) = ...
            cont2(ismember(cont2, [6, 7, 8, 9]))-1;

        [parameters, ll] = runfit(...
            subjecttot,...
            cont1,...
            cont2,...
            cho,...
            ntrials,...
            nz,...
            fit_folder,...
            sprintf('%s%s%s', exp_name, '_exp_vs_exp', to_add));

        ev = [-0.8, -0.6, -0.4, -0.2, 0.2, 0.4, 0.6, 0.8];

        Y1 = parameters(:, 1:8)';

        [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
            DataExtraction.extract_sym_vs_lot_post_test(...
            d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

        % set ntrials
        ntrials = size(cho, 2);
        subjecttot = length(d.(exp_name).sub_ids);
        nz = [8, 1];
        cont1(ismember(cont1, [6, 7, 8, 9])) = ...
            cont1(ismember(cont1, [6, 7, 8, 9]))-1;
        cont2 = ev2;

        [parameters, ll] = runfit(...
            subjecttot,...
            cont1,...
            cont2,...
            cho,...
            ntrials,...
            nz,...
            fit_folder,...
            sprintf('%s%s%s', exp_name, '_desc_vs_exp', to_add));

        Y2 = parameters(: , 1:8)';

        %x = linspace(min(xlim), max(yl), 10);
        brick_comparison_plot(...
            Y1,...
            Y2,...
            blue_color,...
            orange_color,...
            [-1, 1], 11,...
            titles{i},...
            'Symbol Expected Value',...
            'Fitted value', ev, 1);

        hold on

        yline(0, 'LineStyle', ':', 'LineWidth', 2);
        hold on

        x_lim = get(gca, 'XLim');
        y_lim = get(gca, 'YLim');

        x = linspace(x_lim(1), x_lim(2), 10);

        y = linspace(y_lim(1), y_lim(2), 10);
        plot(x, y, 'LineStyle', '--', 'Color', 'k');
        hold on


        for sub = 1:subjecttot
            X = ev;
            Y = Y1(:, sub);
            [r(1, i, sub, :), thrw1, thrw2] = glmfit(X, Y);
            b = glmfit(1:length(ev), Y);
            pY1(sub, :) = glmval(b, 1:length(ev), 'identity');
            X = ev;
            Y = Y2(:, sub);
            [r(2, i, sub, :), thrw1, thrw2] = glmfit(X, Y);
            b = glmfit(1:length(ev), Y);
            pY2(sub, :) = glmval(b, 1:length(ev), 'identity');
        end

        mn1 = mean(pY1, 1);
        mn2 = mean(pY2, 1);
        err1 = std(pY1, 1)./sqrt(subjecttot);
        err2 = std(pY2, 1)./sqrt(subjecttot);

        curveSup1 = (mn1 + err1);
        curveSup2 = (mn2 + err2);
        curveInf1 = (mn1 - err1);
        curveInf2 = (mn2 -err2);

        plot(1:length(ev), mn1, 'LineWidth', 1.7, 'Color', blue_color);
        hold on
        plot(1:length(ev), mn2, 'LineWidth', 1.7, 'Color', orange_color);
        hold on
        fill([(1:length(ev))'; flipud((1:length(ev))')], [curveInf1'; flipud(curveSup1')],...
            blue_color, ...
            'lineWidth', 1, ...
            'LineStyle', 'none',...
            'Facecolor', blue_color, ...
            'Facealpha', 0.55);
        hold on
        fill([(1:length(ev))'; flipud((1:length(ev))')],[curveInf2'; flipud(curveSup2')],...
            orange_color, ...
            'lineWidth', 1, ...
            'LineStyle', 'none',...
            'Facecolor', orange_color, ...
            'Facealpha', 0.55);
        hold on
        i = i + 1;
        box off


    end

    titles2 = {'Intercept', 'Slope'};
    sub_plot = [4, 3];
    for j = 1:2

        subplot(2, 2, sub_plot(j))
        for k = 1:2
            %rsize = reshape(r(:, k, :, j), [size(r, 3), 2]);
            %mn(k, :) = mean(rsize);
            %err(k, :) = std(rsize)./sqrt(size(r, 3));

            dd{k, 1} = reshape(r(2, k, :, j), [], 1);
            dd{k, 2} = reshape(r(1, k, :, j), [], 1);
            
            mn(k, 1) = mean(dd{k, 1});
            mn(k, 2) = mean(dd{k, 2});
            
            err(k, 1) = std(dd{k, 1})./sqrt(length(dd{k, 1}));
            err(k, 2) = std(dd{k, 2})./sqrt(length(dd{k, 2}));

        end
        
        x = dd{1, 1};
        y = dd{1, 2};
        p = signrank(x,y);
        pp(1) = p;
       
        x = dd{2, 1};
        y = dd{2, 2};
        p = signrank(x,y);
        pp(2) = p;
  

        %pp = pval_adjust(pp, 'bonferroni');
        for sp = pp 
            if sp < .001
                h = '***';
            elseif sp < .01
                h='**';
            elseif sp < .05
                h ='*';
            else 
                h = 'none';
            end
            fprintf('h=%s, p=%d \n', h, sp);
        end
        fprintf('===================== \n');
        b = bar(mn);% 'EdgeColor', 'w', 'FaceAlpha', 0.6, 'FaceColor', 'flat');
        hold on

        b(1).FaceColor = orange_color;
        b(2).FaceColor = blue_color;
        b(1).FaceAlpha = 0.7;
        b(2).FaceAlpha = 0.7;

        ax1 = gca;
        set(gca, 'XTickLabel', titles);
        ylabel('Slope Value');
        title(titles2{j});
        legend('post-test ED', 'post-test EE',  'Location', 'southeast');
        e1 = errorbar(b(1).XData+b(1).XOffset, mn(:, 1), err(:, 1), 'LineStyle', 'none',...
            'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');
        hold on
        e2 = errorbar(b(2).XData+b(2).XOffset, mn(:, 2), err(:, 2), 'LineStyle', 'none',...
            'LineWidth', 2, 'Color', 'k', 'HandleVisibility','off');

        box off

        hold on
        ngroups = 2;
        nbars = 2;
        % Calculating the width for each bar group
        groupwidth = min(0.8, nbars/(nbars + 1.5));
        colors = [orange_color; blue_color];
        for b = 1:nbars
            x = (1:ngroups) - groupwidth/2 + (2*b-1) * groupwidth / (2*nbars);
            hold on
            for k = 1:length(x)

                d = reshape(dd{k, b}, [], 1);
                nsub = length(d);

                s = scatter(...
                    x(k).*ones(1, nsub)-Shuffle(linspace(-0.04, 0.04, nsub)),...
                    d',...
                    'MarkerFaceAlpha', 0.65, 'MarkerEdgeAlpha', 1,...
                    'MarkerFaceColor', colors(b, :),...
                    'MarkerEdgeColor', 'w', 'HandleVisibility','off');
            end
        end

        uistack(e1, 'top');
        uistack(e2, 'top');

        %set(gca, 'xtick', []);
        set(gca, 'box', 'off');
        %set(ax(j), 'box', 'off');

        %set(gca, 'ytick', []);
        %ylim([0, 1.15]);

        box off
    end


    saveas(gcf, 'fig/fit/all/fitted_value_exp_6.png')

end

function [parameters, ll] = ...
    runfit(subjecttot, cont1, cont2, cho, ntrials, nz, folder, fit_filename, type)

try
    disp(sprintf('%s%s', folder, fit_filename));
    data = load(sprintf('%s%s', folder, fit_filename));
    parameters = data.data('parameters');  %% Optimization parameters
    ll = data.data('ll');
    answer = question(...
        'There is already a fit file, would you like to use it or to rerun analyses (the old file will be replaced)',...
        'Use existent fit file', 'Rerun and erase');
    if strcmp(answer, 'Use existent fit file')
        return
    end
catch
end
parameters = zeros(subjecttot, 8);
ll = zeros(subjecttot, 1);

options = optimset(...
    'Algorithm',...
    'interior-point',...
    'Display', 'off',...
    'MaxIter', 10000,...
    'MaxFunEval', 10000);

w = waitbar(0, 'Fitting subject');
for sub = 1:subjecttot
    
    waitbar(...
        sub/subjecttot,...  % Compute progression
        w,...
        sprintf('%s%d', 'Fitting subject ', sub)...
        );
    
    [
        p,...
        l,...
        rep,...
        output,...
        lmbda,...
        grad,...
        hess,...
        ] = fmincon(...
        @(x) value(...
        x,...
        cont1(sub, :),...
        cont2(sub, :),...
        cho(sub, :),...
        nz,...
        ntrials, type),...
        zeros(8, 1),...
        [], [], [], [],...
        ones(8, 1) .* -1,...
        ones(8, 1),...
        [],...
        options...
        );
    parameters(sub, :) = p;
    ll(sub) = l;
    
end
%% Save the data
data = containers.Map({'parameters', 'll'},...
    {parameters, ll});
save(sprintf('%s%s', folder, fit_filename), 'data');
close(w);

end

