% --------------------------------------------------------------------
% This script finds the best fitting Values for each exp
% then plots the article figs
% --------------------------------------------------------------------
init;

%------------------------------------------------------------------------
% Plot 
%------------------------------------------------------------------------
exp_names = {filenames{[6, 7]}};
exp_num = 1;
for exp_name = exp_names
    plot_fitted_value_according_to_amb(...
        d, idx, fit_folder, green_color, exp_name, exp_num);
    exp_num = exp_num + 1;
end

% --------------------------------------------------------------------
% FUNCTIONS USED IN THIS SCRIPT
% --------------------------------------------------------------------
function plot_fitted_value_according_to_amb(d, idx, fit_folder,...
    green_color, exp_name, exp_num)
    
    tt = {'Exp. 6', 'Exp. 7'};
    figure('Position', [1,1,900,600]);

    session = [0, 1];
    exp_name = char(exp_name);

    [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
        DataExtraction.extract_lot_vs_amb_post_test(...
        d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

    % set ntrials
    ntrials = size(cho, 2);
    subjecttot = length(d.(exp_name).sub_ids);
    nz = [1, 1];
    cont1 = ev1;
    cont2 = zeros(size(cont2));
    type = 4;
    arg = 0;

    [parameters, ll] = runfit(...
        subjecttot,...
        cont1,...
        cont2,...
        cho,...
        ntrials,...
        nz,...
        type,...
        arg,...
        fit_folder,...
        sprintf('%s%s%s', exp_name, '_desc_vs_amb'));

    amb_value = mean(parameters);

    [corr1, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
        DataExtraction.extract_sym_vs_amb_post_test(...
        d.(exp_name).data, d.(exp_name).sub_ids, idx, session);

    % set ntrials
    ntrials = size(cho, 2);
    subjecttot = length(d.(exp_name).sub_ids);
    nz = [8, 1];
    u_cont = unique(cont1)';

    count = 1;
    for j = u_cont
        disp(j);
        cont1(cont1 == j) = count;
        count = count + 1;
    end
%     replace_by = [
%     % if exp 7 reorder cont
%     if any(u_cont>10)
%        
%     end

    for sub = 1:subjecttot
        cont2(sub, :) = ones(size(cont2, 2), 1) .* parameters(sub);
    end
    type = 5;

    [parameters, ll] = runfit(...
        subjecttot,...
        cont1,...
        cont2,...
        cho,...
        ntrials,...
        nz,...
        type,...
        arg,...
        fit_folder,...
        sprintf('%s%s%s', exp_name, '_exp_vs_amb'));

    ev = unique(ev1);
    [throw, order] = sort(mean(parameters, 1));
    Y2 = parameters(: , order)';

    brickplot(...
        Y2,...
        green_color.*ones(8, 1),...
        [-1, 1], 11,...
        '',...
        'Symbol Expected Value',...
        'Fitted value', ev, 1);
    hold on

    y0 = yline(0, 'LineStyle', ':', 'LineWidth', 2);
    hold on

    x_lim = get(gca, 'XLim');
    y_lim = get(gca, 'YLim');

    x = linspace(x_lim(1), x_lim(2), 10);

    y = linspace(y_lim(1), y_lim(2), 10);
    p0 = plot(x, y, 'LineStyle', '--', 'Color', 'k');
    hold on

    for sub = 1:subjecttot
        X = ev;
        Y = Y2(:, sub);
        [r(1, sub, :), thrw1, thrw2] = glmfit(X, Y);
        b = glmfit(1:length(ev), Y);
        pY2(sub, :) = glmval(b, 1:length(ev), 'identity');
    end

    mn2 = mean(pY2, 1);
    err2 = std(pY2, 1)./sqrt(subjecttot);

    curveSup2 = (mn2 + err2);
    curveInf2 = (mn2 -err2);

    p1 = plot(1:length(ev), mn2, 'LineWidth', 1.7, 'Color', green_color);
    hold on

    p2 = fill([...
        (1:length(ev))'; flipud((1:length(ev))')],...
        [curveInf2'; flipud(curveSup2')],...
        green_color, ...
        'lineWidth', 1, ...
        'LineStyle', 'none',...
        'Facecolor', green_color, ...
        'Facealpha', 0.55);
    hold on

    box off

    %     uistack(y0, 'bottom');
    %     uistack(p0, 'bottom');
    set(gca,'TickDir','out')

    title(tt{exp_num});

    mkdir('fig/exp', 'fit_ambiguity');
    saveas(gcf, sprintf('fig/exp/fit_ambiguity/exp_%d.png', exp_num));
end


function [parameters, ll] = ...
    runfit(subjecttot, cont1, cont2, cho, ntrials, nz, type, arg, folder, fit_filename)

try
    disp(sprintf('%s%s', folder, fit_filename));
    data = load(sprintf('%s%s', folder, fit_filename));
    parameters = data.data('parameters');  %% Optimization parameters
    ll = data.data('ll');
    answer = question(...
        'There is already a fit file, would you like to use it or to rerun analyses (the old file will be replaced)',...
        'Use existent fit file', 'Rerun and erase');
    if strcmp(answer, 'Use existent fit file')
        return
    end
catch
end
%parameters = zeros(subjecttot, 1);
%ll = zeros(subjecttot, 1);

options = optimset(...
    'Algorithm',...
    'interior-point',...
    'Display', 'off',...
    'MaxIter', 10000,...
    'MaxFunEval', 10000);

w = waitbar(0, 'Fitting subject');
for sub = 1:subjecttot
    
    waitbar(...
        sub/subjecttot,...  % Compute progression
        w,...
        sprintf('%s%d', 'Fitting subject ', sub)...
        );
    
    [
        p,...
        l,...
        rep,...
        output,...
        lmbda,...
        grad,...
        hess,...
        ] = fmincon(...
        @(x) value(...
        x,...
        cont1(sub, :),...
        cont2(sub, :),...
        cho(sub, :),...
        nz,...
        ntrials, type, arg),...
        zeros(nz),...
        [], [], [], [],...
        ones(nz) .* -1,...
        ones(nz),...
        [],...
        options...
        );
    parameters(sub, :) = p;
    ll(sub) = l;
    
end
%% Save the data
data = containers.Map({'parameters', 'll'},...
    {parameters, ll});
save(sprintf('%s%s', folder, fit_filename), 'data');
close(w);

end

