function [ = sim_exp(exp_name)

    Q = zeros(sim_params.nsub , sim_params.ncond, sim_params.noptions); 
    
    for sub = 1:sim_params.nsub    
        
        alpha1 = alpha1(sub);
        beta1 =  beta1(sub);
        
        s = con(sub, :);
        cfr = cfout(sub, :);
        r = out(sub, :);
        a = cho(sub, :);
        
        for t = 1:ntrials
            
%             pp = softmaxfn(Q(sub, s(t), :), beta1);
%                             
%             a(t) = randsample(...
%                 [1, 2],... % randomly drawn action 1 or 2
%                 1,... % number of element picked
%                 true,...% replacement
%                 pp... % probabilities
%             );
%             
            cfa(t) = (a(t) == 1) + 1;
%             
%             if a(t) == cho(t)
%                 r = out(t); 
%                 cfr = cfout(t);
%             else
%                 r = cfout(t);
%                 cfr = out(t);
%             end
            
            deltaI = r(t) - Q(sub, s(t), a(t));
            cfdeltaI = cfr(t) - Q(sub, s(t), cfa(t)); 

            Q(sub, s(t), a(t)) = Q(sub, s(t), a(t)) + alpha1 * deltaI;
            Q(sub, s(t), cfa(t)) = Q(sub, s(t), cfa(t)) + alpha1 * cfdeltaI;
                    
        end
        
    end
end


   
function p = softmaxfn(Q, b)
    p = exp(Q.*b)./ sum(exp(Q.*b));
end


