function [cho, out, con, p1, p2, ev1, ] = sim_exp_learning(exp_name, d, idx, sess)

    [cho, cfcho, out, cfout, corr, con, p1, p2, rew, rtime, ev1, ev2] = ...
        DataExtraction.extract_learning_data(...
            d.(exp_name).data, d.(exp_name).sub_ids, idx, sess);
    
    parameters = load(sprintf('data/fit/%s', exp_name));
    alpha1 = parameters(1, :, 1);
    beta1 = parameters(1, :, 1);
    
    nsub = lenght(alpha1);
    ntrials = length(cho(1, :));
    itrials = 0;
    
    Q = zeros(nsub, 4, 2); 
    
    for sub = 1:nsub    
        
        alpha1 = alpha1(sub);
        beta1 =  beta1(sub);
        
        s = con(sub, :);
        cfr = cfout(sub, :);
        r = out(sub, :);
        a = cho(sub, :);
        
        for t = 1:ntrials
            
            pp = softmaxfn(Q(sub, s(t), :), beta1);
                            
            a(t) = randsample(...
                [1, 2],... % randomly drawn action 1 or 2
                1,... % number of element picked
                true,...% replacement
                pp... % probabilities
            );
%             
            cfa(t) = (a(t) == 1) + 1;
            
            if a(t) == cho(t)
                r = out(t); 
                cfr = cfout(t);
            else
                r = cfout(t);
                cfr = out(t);
            end
            
            deltaI = r(t) - Q(sub, s(t), a(t));
            cfdeltaI = cfr(t) - Q(sub, s(t), cfa(t)); 

            Q(sub, s(t), a(t)) = Q(sub, s(t), a(t)) + alpha1 * deltaI;
            Q(sub, s(t), cfa(t)) = Q(sub, s(t), cfa(t)) + alpha1 * cfdeltaI;
            
            phase(i
                    
        end
        
    end
end


   
function p = softmaxfn(Q, b)
    p = exp(Q.*b)./ sum(exp(Q.*b));
end


