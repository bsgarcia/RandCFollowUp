classdef DataExtraction
    
    methods (Static)
        
        function [data, sub_ids, exp, sim] = get_data(filename)
            
            data = load(filename);
            
            data = data.data;
            try
                sub_ids = unique(data(:, 1));
            catch
                sub_ids = 1:length(data);
            end
            
            % EXP
            %-------------------------------------------------------------
            exp.rtime = 6;
            exp.cond = 13;
            exp.sess = 20;
            exp.op1 = 21;
            exp.op2 = 22;
            exp.trial = 12;
            exp.cho = 9;
            exp.out = 7;
            exp.cfout = 8;
            exp.corr = 10;
            exp.rew = 19;
            exp.catch = 25;
            exp.elic = 3;
            exp.sub = 1;
            exp.p1 = 4;
            exp.p2 = 5;
            exp.ev1 = 23;
            exp.ev2 = 24;
            exp.dist = 28;
            exp.plot = 29;
            exp.cont1 = 14;
            exp.cont2 = 15;
            
            % SIM
            %-------------------------------------------------------------
            sim.cho = 1;
            sim.out = 2;
            sim.cond = 3;
            sim.softmaxp = 4;
            sim.corr = 5;
            sim.q = 6;
            sim.qdelta = 7;
            sim.p1 = 8;
            sim.p2 = 9;
            sim.ev = 10;
            sim.phase = 11;

        end
        
        
        function [cho, cfcho, out, cfout, corr, con, p1, p2, rew, rtime, ev1, ev2,...
                error_exclude] = extract_learning_data(data, sub_ids, exp, session)
            i = 1;
            error_exclude = [];
            for id = 1:length(sub_ids)
                try
                sub = sub_ids(id);
                mask_sub = data(:, exp.sub) == sub;
                mask_sess = ismember(data(:, exp.sess), session);
                mask_eli = data(:, exp.elic) == -1;
                mask = logical(mask_sub .* mask_sess .* mask_eli);
                
                [noneed, trialorder] = sort(data(mask, exp.trial));
                
                tempcho = data(mask, exp.cho);
                cho(i, :) = tempcho(trialorder);
                
                cfcho(i, :) = 3 - cho(i, :);
                
                tempout = data(mask, exp.out);
                out(i, :) = tempout(trialorder);
                tempcorr = data(mask, exp.corr);
                
                corr(i, :) = tempcorr(trialorder);
                temprew = data(mask, exp.rew);
                
                rew(i, :) = temprew(trialorder);
                
                tempcon = data(mask, exp.cond);
                con(i, :) = tempcon(trialorder) + 1;
                
                tempcfout = data(mask, exp.cfout);
                cfout(i, :) = tempcfout(trialorder);
                
                temp_p1 = data(mask, exp.p1);
                p1(i, :) = temp_p1(trialorder);
                
                temp_p2 = data(mask, exp.p2);
                p2(i, :) = temp_p2(trialorder);
                
                temp_rtime = data(mask, exp.rtime);
                rtime(i, :) = temp_rtime(trialorder);
                
                temp_ev1 = data(mask, exp.ev1);
                ev1(i, :) = temp_ev1(trialorder);

                temp_ev2 = data(mask, exp.ev2);
                ev2(i, :) = temp_ev2(trialorder);
                            
                i = i + 1;
                catch
                    error_exclude(length(error_exclude) + 1) = i;
                    fprintf('There has been an error while treating subject %d \n', i);
                end
            end
        end
        
        function to_keep = exclude_subjects(data, sub_ids, exp,...
                catch_threshold, rtime_threshold, n_best_sub, allowed_nb_of_rows)
            to_keep = [];
            i = 1;
            for id = 1:length(sub_ids)
                sub = sub_ids(id);
                if ismember(sum(data(:, exp.sub) == sub), allowed_nb_of_rows) %255, 285,
                    for eli = [0, 2, -1]
                        if eli ~= -1
                            mask_eli = data(:, exp.elic) == eli;
                            if eli == 0
                                eli = 1;
                            end
                            mask_sub = data(:, exp.sub) == sub;
                            mask_catch = data(:, exp.catch) == 1;
                            mask_no_catch = data(:, exp.catch) == 0;
                            mask_sess = ismember(data(:, exp.sess), [0, 1]);
                            mask = logical(mask_sub .* mask_sess .* mask_catch .* mask_eli);
                            [noneed, trialorder] = sort(data(mask, exp.trial));
                            temp_corr = data(mask, exp.corr);
                            corr_catch{i, eli} = temp_corr(trialorder);

                            mask = logical(mask_sub .* mask_sess .* mask_eli);
                            rtime{i, eli} = data(mask, exp.rtime);
                        else
                            mask_eli = data(:, exp.elic) == eli;
                            mask = logical(mask_sub .* mask_sess .* mask_eli);
                            rtime{i, 3} = data(mask, exp.rtime);
                            corr_catch{i, 3} = data(mask, exp.corr);
                            if  ~ismember(length(corr_catch{i, 3}), [120, 240])
                                
                                error('wrong number of learning trials');
                               
                            end
                        end
                    end
                    
                    if (mean(corr_catch{i, 3}) >= catch_threshold)...
                            && (sum(rtime{i} > rtime_threshold) < 1)
                        to_keep(length(to_keep) + 1) = sub;
                        
                    end
                    i = i + 1;
                    
                end
                
            end
            for j = 1:length(to_keep)
                mask_sub = data(:, exp.sub) == to_keep(j);
                mask_eli = ismember(data(:, exp.elic), [0]);
                mask_corr = logical(mask_sub .* mask_sess .* mask_eli .* mask_no_catch);
                corr(j) = mean(data(mask_corr, exp.corr));
            end
            [throw, sorted_exp] = sort(corr);
            to_keep = to_keep(sorted_exp);
            if n_best_sub ~= 0
                to_keep = to_keep(end-n_best_sub+1:end);
            else
            end
            
            %new_data = data(ismember(data(:, exp.sub), to_keep), :);
        end
        
        function [corr, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                extract_sym_vs_lot_post_test(data, sub_ids, exp, session)
            i = 1;
            for id = 1:length(sub_ids)
                try 
                    sub = sub_ids(id);

                    mask_eli = data(:, exp.elic) == 0;
                    mask_sub = data(:, exp.sub) == sub;
                    mask_catch = data(:, exp.catch) == 0;
                    mask_vs_lot = ismember(data(:, exp.op2), [0, -1]);
                    mask_sess = ismember(data(:, exp.sess), session);
                    mask = logical(mask_sub .* mask_sess .* mask_eli .* mask_catch .* mask_vs_lot);

                    [noneed, trialorder] = sort(data(mask, exp.trial));

                    temp_corr = data(mask, exp.corr);
                    corr(i, :) = temp_corr(trialorder);

                    temp_cho = data(mask, exp.cho);
                    cho(i, :) = temp_cho(trialorder);
                    
                    cfcho(i, :) = 3 - cho(i, :);

                    temp_out = data(mask, exp.out);
                    out(i, :) = temp_out(trialorder);

                    temp_ev1 = data(mask, exp.ev1);
                    ev1(i, :) = temp_ev1(trialorder);

                    temp_catch = data(mask, exp.catch);
                    ctch(i, :) = temp_catch(trialorder);

                    temp_cont1 = data(mask, exp.cont1);
                    cont1(i, :) = temp_cont1(trialorder);
   
                    temp_ev2 = data(mask, exp.ev2);
                    ev2(i, :) = temp_ev2(trialorder);
                    
                    temp_cont2 = data(mask, exp.cont2);
                    cont2(i, :) = temp_cont2(trialorder);
  
                    temp_p1 = data(mask, exp.p1);
                    p1(i, :) = temp_p1(trialorder);

                    temp_p2 = data(mask, exp.p2);
                    p2(i, :) = temp_p2(trialorder);

                    temp_dist = data(mask, exp.dist);
                    dist(i, :) = temp_dist(trialorder)./100;

                    temp_rtime = data(mask, exp.rtime);
                    rtime(i, :) = temp_rtime(trialorder);

                    i = i + 1;
                catch
                    fprintf('There has been an error while treating subject %d \n', i);
                end
            end
            
%             if sum(ismember(cont1, [18, 11, 12, 17]), 'all')
%                 cont1(cont1==8) = 7;
%                 cont1(cont1==2) = 3;
%                 
%                 cont1(cont1==18) = 8;
%                 cont1(cont1==11) = 2;
%                 
%                 cont1(cont1==17) = 6;
%                 cont1(cont1==12) = 4;
%                 
%             end
%             
%             if sum(ismember(cont2, [18, 11, 12, 17]), 'all')
%                 
%                 cont2(cont2==8) = 7;
%                 cont2(cont2==2) = 3;
%                 
%                 cont2(cont2==18) = 8;
%                 cont2(cont2==11) = 2;
%                 
%                 cont2(cont2==17) = 6;
%                 cont2(cont2==12) = 4;
%                 
%             end
        end
        
        function [corr, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                extract_sym_vs_sym_post_test(data, sub_ids, exp, session)
            i = 1;
            for id = 1:length(sub_ids)
                sub = sub_ids(id);
                
                mask_eli = data(:, exp.elic) == 0;
                mask_sub = data(:, exp.sub) == sub;
                mask_catch = data(:, exp.catch) == 0;
                mask_vs_lot = data(:, exp.op2) == 1;
                mask_sess = ismember(data(:, exp.sess), session);
                mask = logical(mask_sub .* mask_sess .* mask_eli .* mask_catch .* mask_vs_lot);
                
                [noneed, trialorder] = sort(data(mask, exp.trial));
                
                temp_corr = data(mask, exp.corr);
                corr(i, :) = temp_corr(trialorder);
                
                temp_cho = data(mask, exp.cho);
                cho(i, :) = temp_cho(trialorder);
                
                cfcho(i, :) = 3 - cho(i, :);
                
                temp_out = data(mask, exp.out);
                out(i, :) = temp_out(trialorder);
                
                temp_ev1 = data(mask, exp.ev1);
                ev1(i, :) = temp_ev1(trialorder);
                
                temp_catch = data(mask, exp.catch);
                ctch(i, :) = temp_catch(trialorder);
                
                temp_cont1 = data(mask, exp.cont1);
                cont1(i, :) = temp_cont1(trialorder);
                
%                 if any(ismember(cont1, [18, 11, 12, 17]))
%                     
%                     cont1(i, cont1(i, :)==8) = 7;
%                     cont1(i, cont1(i, :)==2) = 3;
% 
%                     cont1(i, cont1(i, :)==18) = 8;
%                     cont1(i, cont1(i, :)==11) = 2;
% 
%                     cont1(i, cont1(i, :)==17) = 6;
%                     cont1(i, cont1(i, :)==12) = 4;
%                     
%                 end

                
                temp_ev2 = data(mask, exp.ev2);
                ev2(i, :) = temp_ev2(trialorder);
                
                temp_cont2 = data(mask, exp.cont2);
                cont2(i, :) = temp_cont2(trialorder);
%                 
%                 if any(ismember(cont2, [18, 11, 12, 17]))
%                     cont2(i, cont2(i, :)==8) = 7;
%                     cont2(i, cont2(i, :)==2) = 3;
% 
%                     cont2(i, cont2(i, :)==18) = 8;
%                     cont2(i, cont2(i, :)==11) = 2;
% 
%                     cont2(i, cont2(i, :)==17) = 6;
%                     cont2(i, cont2(i, :)==12) = 4;
%                 end
             
                temp_p1 = data(mask, exp.p1);
                p1(i, :) = temp_p1(trialorder);
                
                temp_p2 = data(mask, exp.p2);
                p2(i, :) = temp_p2(trialorder);
                
                temp_dist = data(mask, exp.dist);
                dist(i, :) = temp_dist(trialorder)./100;
                
                temp_rtime = data(mask, exp.rtime);
                rtime(i, :) = temp_rtime(trialorder);
                
                i = i + 1;
            end
               
            if sum(ismember(cont1, [18, 11, 12, 17]), 'all')
                cont1(cont1==8) = 7;
                cont1(cont1==2) = 3;
                
                cont1(cont1==18) = 8;
                cont1(cont1==11) = 2;
                
                cont1(cont1==17) = 6;
                cont1(cont1==12) = 4;
                
            end
            
            if sum(ismember(cont2, [18, 11, 12, 17]), 'all')
                
                cont2(cont2==8) = 7;
                cont2(cont2==2) = 3;
                
                cont2(cont2==18) = 8;
                cont2(cont2==11) = 2;
                
                cont2(cont2==17) = 6;
                cont2(cont2==12) = 4;
                
            end
            
        end
        
         function [corr, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                extract_sym_vs_amb_post_test(data, sub_ids, exp, session)
            i = 1;
            for id = 1:length(sub_ids)
                sub = sub_ids(id);
                
                mask_eli = data(:, exp.elic) == 0;
                mask_sub = data(:, exp.sub) == sub;
                mask_catch = data(:, exp.catch) == 0;
                mask_vs_amb = data(:, exp.op2) == 2;
                mask_vs_sym = data(:, exp.op1) == 1;

                mask_sess = ismember(data(:, exp.sess), session);
                mask = logical(mask_sub .* mask_sess .* mask_eli .* mask_catch .* mask_vs_sym .* mask_vs_amb);
                
                [noneed, trialorder] = sort(data(mask, exp.trial));
                
                temp_corr = data(mask, exp.corr);
                corr(i, :) = temp_corr(trialorder);
                
                temp_cho = data(mask, exp.cho);
                cho(i, :) = temp_cho(trialorder);
                
                temp_out = data(mask, exp.out);
                out(i, :) = temp_out(trialorder);
                
                temp_ev1 = data(mask, exp.ev1);
                ev1(i, :) = temp_ev1(trialorder);
                
                temp_catch = data(mask, exp.catch);
                ctch(i, :) = temp_catch(trialorder);
                
                temp_cont1 = data(mask, exp.cont1);
                cont1(i, :) = temp_cont1(trialorder);
                
                temp_ev2 = data(mask, exp.ev2);
                ev2(i, :) = temp_ev2(trialorder);
                
                temp_cont2 = data(mask, exp.cont2);
                cont2(i, :) = temp_cont2(trialorder);
                
                temp_p1 = data(mask, exp.p1);
                p1(i, :) = temp_p1(trialorder);
                
                temp_p2 = data(mask, exp.p2);
                p2(i, :) = temp_p2(trialorder);
                
                temp_dist = data(mask, exp.dist);
                dist(i, :) = temp_dist(trialorder)./100;
                
                temp_rtime = data(mask, exp.rtime);
                rtime(i, :) = temp_rtime(trialorder);
                
                i = i + 1;
            end
         end
        
         function [corr, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                extract_lot_vs_amb_post_test(data, sub_ids, exp, session)
            i = 1;
            for id = 1:length(sub_ids)
                sub = sub_ids(id);
                
                mask_eli = data(:, exp.elic) == 0;
                mask_sub = data(:, exp.sub) == sub;
                mask_catch = data(:, exp.catch) == 0;
                mask_vs_amb = data(:, exp.op2) == 2;
                mask_vs_sym = data(:, exp.op1) == 0;

                mask_sess = ismember(data(:, exp.sess), session);
                mask = logical(mask_sub .* mask_sess .* mask_eli .* mask_catch .* mask_vs_sym .* mask_vs_amb);
                
                [noneed, trialorder] = sort(data(mask, exp.trial));
                
                temp_corr = data(mask, exp.corr);
                corr(i, :) = temp_corr(trialorder);
                
                temp_cho = data(mask, exp.cho);
                cho(i, :) = temp_cho(trialorder);
                
                temp_out = data(mask, exp.out);
                out(i, :) = temp_out(trialorder);
                
                temp_ev1 = data(mask, exp.ev1);
                ev1(i, :) = temp_ev1(trialorder);
                
                temp_catch = data(mask, exp.catch);
                ctch(i, :) = temp_catch(trialorder);
                
                temp_cont1 = data(mask, exp.cont1);
                cont1(i, :) = temp_cont1(trialorder);
                
                temp_ev2 = data(mask, exp.ev2);
                ev2(i, :) = temp_ev2(trialorder);
                
                temp_cont2 = data(mask, exp.cont2);
                cont2(i, :) = temp_cont2(trialorder);
                
                temp_p1 = data(mask, exp.p1);
                p1(i, :) = temp_p1(trialorder);
                
                temp_p2 = data(mask, exp.p2);
                p2(i, :) = temp_p2(trialorder);
                
                temp_dist = data(mask, exp.dist);
                dist(i, :) = temp_dist(trialorder)./100;
                
                temp_rtime = data(mask, exp.rtime);
                rtime(i, :) = temp_rtime(trialorder);
                
                i = i + 1;
            end
         end
         function [corr, cho, out, p1, p2, ev1, ev2, ctch, cont1, cont2, dist, rtime] = ...
                extract_estimated_probability_post_test(data, sub_ids, exp, session)
            i = 1;
            for id = 1:length(sub_ids)
                try 
                    sub = sub_ids(id);

                    mask_eli = data(:, exp.elic) == 2;
                    mask_sub = data(:, exp.sub) == sub;
                    mask_catch = data(:, exp.catch) == 0;
                    %mask_vs_lot = ismember(data(:, exp.op2), [0, -1]);
                    mask_sess = ismember(data(:, exp.sess), session);
                    mask = logical(mask_sub .* mask_sess .* mask_eli .* mask_catch);

                    [noneed, trialorder] = sort(data(mask, exp.trial));

                    temp_corr = data(mask, exp.corr);
                    corr(i, :) = temp_corr(trialorder);

                    temp_cho = data(mask, exp.cho);
                    cho(i, :) = temp_cho(trialorder);

                    temp_out = data(mask, exp.out);
                    out(i, :) = temp_out(trialorder);

                    temp_ev1 = data(mask, exp.ev1);
                    ev1(i, :) = temp_ev1(trialorder);

                    temp_catch = data(mask, exp.catch);
                    ctch(i, :) = temp_catch(trialorder);

                    temp_cont1 = data(mask, exp.cont1);
                    cont1(i, :) = temp_cont1(trialorder);

                    temp_ev2 = data(mask, exp.ev2);
                    ev2(i, :) = temp_ev2(trialorder);

                    temp_cont2 = data(mask, exp.cont2);
                    cont2(i, :) = temp_cont2(trialorder);

                    temp_p1 = data(mask, exp.p1);
                    p1(i, :) = temp_p1(trialorder);

                    temp_p2 = data(mask, exp.p2);
                    p2(i, :) = temp_p2(trialorder);

                    temp_dist = data(mask, exp.dist);
                    dist(i, :) = temp_dist(trialorder)./100;

                    temp_rtime = data(mask, exp.rtime);
                    rtime(i, :) = temp_rtime(trialorder);

                    i = i + 1;
                catch
                    fprintf('There has been an error while treating subject %d \n', i);
                end
            end
        end
    
    end
end
